"use strict";(self.webpackChunkuserflow_docs=self.webpackChunkuserflow_docs||[]).push([[27],{1165:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"why","metadata":{"permalink":"/userflow/blog/why","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2024-03-05-why/index.md","source":"@site/blog/2024-03-05-why/index.md","title":"Why Userflow?","description":"I once logged into a SaaS app and was hit with 2 different modals announcing new features and welcoming me into the app. Later that day, I was sent a useless email explaining how to use a feature that I had already learned how to use after I logged in. Unfortunately, this happened on a SaaS app that my team was building.","date":"2024-03-05T00:00:00.000Z","formattedDate":"March 5, 2024","tags":[],"readingTime":2.36,"hasTruncateMarker":false,"authors":[{"name":"Matt Dupree","title":"Maintainer of Docusaurus","url":"https://github.com/kmdupr33","imageURL":"https://github.com/kmdupr33.png","key":"matt"}],"frontMatter":{"slug":"why","title":"Why Userflow?","authors":["matt"]},"unlisted":false},"content":"I once logged into a SaaS app and was hit with 2 different modals announcing new features and welcoming me into the app. Later that day, I was sent a useless email explaining how to use a feature that I had already learned how to use after I logged in. Unfortunately, this happened on a SaaS app that my team was building.\\n\\nFixing this bad experience wasn\'t easy. Our onboarding code was:\\n\\n1. Spread out all over the codebase like spaghetti.\\n1. Hardcoded into clients.\\n1. Tightly coupled with vendor code and SaaS tools.\\n\\nWe all knew we shouldn\'t write hardcoded, tightly-coupled, spaghetti code, and yet, over time, that\'s how our onboarding code evovled. Different engineers working on different projects over time didn\'t see the mess they were going to make. A little hardcoded product tour built with [react-joyride](https://react-joyride.com/) seemed harmless. So did tightly coupling our email sending logic with [Sendgrid\'s](https://sendgrid.com/en-us/solutions/email-api) SDK.\\n\\nThis sort of thing had happened before, and upon reflection this isn\'t suprising. Onboarding code often isn\'t fun to write, and product and marketing are often in a hurry to get it done. To work on these sorts of projects without guardrails is like writing C++. In both cases, you\'re circling [the pit of despair](https://blog.codinghorror.com/falling-into-the-pit-of-success/):\\n\\n> That\'s the problem with C++. It does a terrible job of protecting you from your own worst enemy \u2013 yourself. When you write code in C++, you\'re always circling the pit of despair, just one misstep away from plunging to your doom.\\n\\nWe wrote Userflow to create the pit of success for onboarding code, to make it easy to write centralized (cohesive), loosely-coupled, server-configurable onboarding experiences across applications, email, and beyond.\\n\\nThe gist of our approach is to create a kind of orchestration engine for these experiences. Something like Airflow, but specifically designed for user onboarding experiences. Userflow gives you a declarative way specify the logic for which user see what at what time. Then it fetches the user data relevant to this logic from multiple sources to ensure that it is executed flawlessly. \\n\\nThe following code would fix the bad onboarding experience I started this post with:\\n\\n```js\\n// server-config.ts\\nconst config: Config = {\\n  user: {\\n    properties: [\\n      {\\n        type: \\"postgres\\",\\n        name: \\"profileCreatedAt\\",\\n      },\\n      {\\n        type: \\"postgres\\",\\n        name: \\"profilePhotoCreatedAt\\",\\n      },\\n    ],\\n  },\\n  flows: [\\n    {\\n      name: \\"welcome\\",\\n      when: \\"profileCreatedAt === null\\",\\n      steps: [\\n        {\\n          type: \\"banner\\",\\n          content: \\"Welcome to the app! Complete your profile!\\",\\n        },\\n        {\\n          type: \\"modal\\",\\n          content: \\"We just shipped profile photos!\\",\\n        },\\n      ],\\n    },\\n  ],\\n};\\n\\nexport default config;\\n```\\n\\n```js\\n// app.jsx\\nconst App = ({userEmail}) => {\\n    const { flow } = useUserFlow(userEmail)\\n    const {name, content} = flow\\n       return (\\n        <WelcomeBanner show={name === \'welcome\'} content={content}/>\\n        <AnnounceModal open={name === \'announce\'} content={content}>\\n        <Heading>\\n            Good apps use userflow.\\n        </Heading>\\n        <Button>Ok</Button>\\n    )\\n}\\n```\\n\\nTo learn more, check out our [docs](/docs/intro)."}]}')}}]);